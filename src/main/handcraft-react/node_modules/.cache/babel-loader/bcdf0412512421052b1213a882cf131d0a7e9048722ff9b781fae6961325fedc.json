{"ast":null,"code":"const fetchProductByAllInputs = async (searchTitle, categoryId, minPrice, maxPrice, setProducts, setPriceError, currentPage, productPerPage, setTotalPages, setTotalElements, sortUrl) => {\n  if (isNaN(maxPrice) || isNaN(minPrice)) {\n    setPriceError(true);\n  } else {\n    setPriceError(false);\n    let url = \"\";\n    if (searchTitle !== \"\" && categoryId !== 0 && minPrice !== 0 && maxPrice !== 10000) {\n      currentPage = 1;\n      url = `http://localhost:8080/api/products/search/findByProductNameContainingIgnoreCaseAndCategoryAndPriceBetween?productName=${searchTitle}&category=${categoryId}%20&minPrice=${minPrice}%20&maxPrice=${maxPrice}%20&page=${currentPage - 1}&size=${productPerPage}`;\n    } else if (searchTitle !== \"\" && categoryId !== 0 && minPrice === 0 && maxPrice === 10000) {\n      url = `http://localhost:8080/api/products/search/findByProductNameContainingIgnoreCaseAndCategory?productName=${searchTitle}&category=${categoryId}%20`;\n    } else if (searchTitle !== \"\" && categoryId === 0 && minPrice === 0 && maxPrice === 10000) {\n      currentPage = 1;\n      url = `http://localhost:8080/api/products/search/findByProductNameContainingIgnoreCase?productName=${searchTitle}&page=${currentPage - 1}&size=${productPerPage}`;\n    } else if (searchTitle !== \"\" && categoryId === 0 && minPrice !== 0 && maxPrice !== 10000) {\n      currentPage = 1;\n      url = `http://localhost:8080/api/products/search/findByProductNameContainingIgnoreCaseAndPriceBetween?productName=${searchTitle}&minPrice=${minPrice}%20&maxPrice=${maxPrice}%20&page=${currentPage - 1}&size=${productPerPage}`;\n    } else if (searchTitle === \"\" && categoryId !== 0 && minPrice !== 0 && maxPrice !== 10000) {\n      currentPage = 1;\n      url = `http://localhost:8080/api/products/search/findByCategoryAndPriceBetween?category=${categoryId}%20&minPrice=${minPrice}%20&maxPrice=${maxPrice}%20&page=${currentPage - 1}&size=${productPerPage}`;\n    } else if (searchTitle === \"\" && categoryId !== 0 && minPrice === 0 && maxPrice === 10000) {\n      currentPage = 1;\n      url = `http://localhost:8080/api/products/search/findByCategory?category=${categoryId}%20&page=${currentPage - 1}&size=${productPerPage}`;\n    } else if (searchTitle === \"\" && categoryId === 0 && minPrice !== 0 && maxPrice !== 10000) {\n      currentPage = 1;\n      url = `http://localhost:8080/api/products/search/findByPriceBetween?minPrice=${minPrice}%20&maxPrice=${maxPrice}%20&page=${currentPage - 1}&size=${productPerPage}`;\n    } else {\n      url = `http://localhost:8080/api/products?page=${currentPage - 1}&size=${productPerPage}`;\n    }\n    if (sortUrl !== \"&sort=\") {\n      url += sortUrl;\n    }\n    if (maxPrice > minPrice) {\n      const responseData = await fetch(url);\n      if (!responseData.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n      const responseJson = await responseData.json();\n      setTotalPages(responseJson.page.totalPages);\n      setProducts(responseJson._embedded.products);\n      setTotalElements(responseJson.page.totalElements);\n    } else {\n      setPriceError(true);\n    }\n  }\n};\nexport { fetchProductByAllInputs };","map":{"version":3,"names":["fetchProductByAllInputs","searchTitle","categoryId","minPrice","maxPrice","setProducts","setPriceError","currentPage","productPerPage","setTotalPages","setTotalElements","sortUrl","isNaN","url","responseData","fetch","ok","Error","responseJson","json","page","totalPages","_embedded","products","totalElements"],"sources":["C:/Users/Mehemmed/Desktop/Code{1}/Projects/handcraft/src/main/handcraft-react/src/Utils/SearchFunction.tsx"],"sourcesContent":["import { Dispatch, SetStateAction } from \"react\";\r\nimport ProductModel from \"../Models/ProductModel\";\r\n\r\nconst fetchProductByAllInputs = async (\r\n  searchTitle: string,\r\n  categoryId: number,\r\n  minPrice: number,\r\n  maxPrice: number,\r\n  setProducts: Dispatch<SetStateAction<ProductModel[]>>,\r\n  setPriceError: Dispatch<SetStateAction<boolean>>,\r\n  currentPage:number,\r\n  productPerPage:number,\r\n  setTotalPages: Dispatch<SetStateAction<number>>,\r\n  setTotalElements: Dispatch<SetStateAction<number>>,\r\n  sortUrl:string\r\n) => {\r\n  if (\r\n    isNaN(maxPrice) || isNaN(minPrice)\r\n  ) {\r\n    setPriceError(true);\r\n  } else {\r\n    setPriceError(false);\r\n    let url = \"\";\r\n    if (\r\n      searchTitle !== \"\" &&\r\n      categoryId !== 0 &&\r\n      minPrice !== 0 &&\r\n      maxPrice !== 10000\r\n    ) {\r\n      currentPage = 1\r\n\r\n      url = `http://localhost:8080/api/products/search/findByProductNameContainingIgnoreCaseAndCategoryAndPriceBetween?productName=${searchTitle}&category=${categoryId}%20&minPrice=${minPrice}%20&maxPrice=${maxPrice}%20&page=${currentPage - 1}&size=${productPerPage}`;\r\n    } else if (\r\n      searchTitle !== \"\" &&\r\n      categoryId !== 0 &&\r\n      minPrice === 0 &&\r\n      maxPrice === 10000\r\n    ) {\r\n      url = `http://localhost:8080/api/products/search/findByProductNameContainingIgnoreCaseAndCategory?productName=${searchTitle}&category=${categoryId}%20`;\r\n    } else if (\r\n      searchTitle !== \"\" &&\r\n      categoryId === 0 &&\r\n      minPrice === 0 &&\r\n      maxPrice === 10000\r\n    ) {\r\n      currentPage = 1\r\n\r\n      url = `http://localhost:8080/api/products/search/findByProductNameContainingIgnoreCase?productName=${searchTitle}&page=${currentPage - 1}&size=${productPerPage}`;\r\n    } else if (\r\n      searchTitle !== \"\" &&\r\n      categoryId === 0 &&\r\n      minPrice !== 0 &&\r\n      maxPrice !== 10000\r\n    ) {\r\n      currentPage = 1\r\n\r\n      url = `http://localhost:8080/api/products/search/findByProductNameContainingIgnoreCaseAndPriceBetween?productName=${searchTitle}&minPrice=${minPrice}%20&maxPrice=${maxPrice}%20&page=${currentPage - 1}&size=${productPerPage}`;\r\n    } else if (\r\n      searchTitle === \"\" &&\r\n      categoryId !== 0 &&\r\n      minPrice !== 0 &&\r\n      maxPrice !== 10000\r\n    ) {\r\n      currentPage = 1\r\n\r\n      url = `http://localhost:8080/api/products/search/findByCategoryAndPriceBetween?category=${categoryId}%20&minPrice=${minPrice}%20&maxPrice=${maxPrice}%20&page=${currentPage - 1}&size=${productPerPage}`;\r\n    } else if (\r\n      \r\n      searchTitle === \"\" &&\r\n      categoryId !== 0 &&\r\n      minPrice === 0 &&\r\n      maxPrice === 10000\r\n    ) {\r\n      currentPage = 1\r\n\r\n      url = `http://localhost:8080/api/products/search/findByCategory?category=${categoryId}%20&page=${currentPage - 1}&size=${productPerPage}`;\r\n    } else if (\r\n      searchTitle === \"\" &&\r\n      categoryId === 0 &&\r\n      minPrice !== 0 &&\r\n      maxPrice !== 10000\r\n    ) {\r\n       currentPage = 1\r\n      url = `http://localhost:8080/api/products/search/findByPriceBetween?minPrice=${minPrice}%20&maxPrice=${maxPrice}%20&page=${currentPage - 1}&size=${productPerPage}`;\r\n    } else {\r\n      url = `http://localhost:8080/api/products?page=${currentPage - 1}&size=${productPerPage}`;\r\n    }\r\n    if(sortUrl !==\"&sort=\"){\r\n      url +=sortUrl\r\n    }\r\n    if(maxPrice> minPrice){\r\n      const responseData = await fetch(url);\r\n      if (!responseData.ok) {\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n\r\n      const responseJson = await responseData.json();\r\n      setTotalPages(responseJson.page.totalPages)\r\n      setProducts(responseJson._embedded.products);\r\n      setTotalElements(responseJson.page.totalElements)\r\n    }else{\r\n      setPriceError(true)\r\n    }\r\n  }\r\n};\r\n\r\nexport { fetchProductByAllInputs };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}