{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialTodoState = {};\nconst todoSlice = createSlice({\n  name: \"todo\",\n  initialState: initialTodoState,\n  reducers: {\n    loginSuccess: (state, action) => {\n      const {\n        user\n      } = action.payload;\n      state.userEmail = user.email;\n      state.name = user.firstName;\n      state.accessToken = user.accessToken;\n      state.tokenType = user.tokenType;\n      state.roles = user.roles;\n    },\n    isAuthenticatedChecker: state => {\n      if (state.roles.includes(\"USER\") === true) {\n        state.isAuthenticated = true;\n      }\n    },\n    logout: state => {\n      state.userEmail = \"\";\n      state.accessToken = \"\";\n      state.tokenType = \"\";\n      state.roles = [];\n      state.name = \"\";\n      state.isAuthenticated = false;\n    },\n    isAdminChecker: state => {\n      if (state.roles.includes('ADMIN')) {\n        state.isAdmin = true;\n      } else {\n        state.isAdmin = false;\n      }\n    }\n  }\n});\nexport default todoSlice.reducer;","map":{"version":3,"names":["createSlice","initialTodoState","todoSlice","name","initialState","reducers","loginSuccess","state","action","user","payload","userEmail","email","firstName","accessToken","tokenType","roles","isAuthenticatedChecker","includes","isAuthenticated","logout","isAdminChecker","isAdmin","reducer"],"sources":["C:/Users/Mehemmed/Desktop/Code{1}/Projects/handcraft/src/main/handcraft-react/src/Redux/todoSlice.ts"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialTodoState = {\r\n \r\n};\r\n\r\nconst todoSlice = createSlice({\r\n  name: \"todo\",\r\n  initialState: initialTodoState,\r\n  reducers: {\r\n    loginSuccess: (state: any, action) => {\r\n      const { user } = action.payload;\r\n      state.userEmail = user.email;\r\n      state.name = user.firstName;\r\n      state.accessToken = user.accessToken;\r\n      state.tokenType = user.tokenType;\r\n      state.roles = user.roles;\r\n    },\r\n    isAuthenticatedChecker: (state: any) => {\r\n      if (state.roles.includes(\"USER\") === true) {\r\n        state.isAuthenticated = true;\r\n      }\r\n    },\r\n    logout: (state: any) => {\r\n      state.userEmail = \"\";\r\n      state.accessToken = \"\";\r\n      state.tokenType = \"\";\r\n      state.roles = [];\r\n      state.name = \"\";\r\n      state.isAuthenticated = false;\r\n    },\r\n    isAdminChecker:(state:any)=>{\r\n      if(state.roles.includes('ADMIN')){\r\n        state.isAdmin = true\r\n      }else{\r\n        state.isAdmin = false\r\n      }\r\n    }\r\n  },\r\n});\r\n\r\nexport default todoSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,gBAAgB,GAAG,CAEzB,CAAC;AAED,MAAMC,SAAS,GAAGF,WAAW,CAAC;EAC5BG,IAAI,EAAE,MAAM;EACZC,YAAY,EAAEH,gBAAgB;EAC9BI,QAAQ,EAAE;IACRC,YAAY,EAAEA,CAACC,KAAU,EAAEC,MAAM,KAAK;MACpC,MAAM;QAAEC;MAAK,CAAC,GAAGD,MAAM,CAACE,OAAO;MAC/BH,KAAK,CAACI,SAAS,GAAGF,IAAI,CAACG,KAAK;MAC5BL,KAAK,CAACJ,IAAI,GAAGM,IAAI,CAACI,SAAS;MAC3BN,KAAK,CAACO,WAAW,GAAGL,IAAI,CAACK,WAAW;MACpCP,KAAK,CAACQ,SAAS,GAAGN,IAAI,CAACM,SAAS;MAChCR,KAAK,CAACS,KAAK,GAAGP,IAAI,CAACO,KAAK;IAC1B,CAAC;IACDC,sBAAsB,EAAGV,KAAU,IAAK;MACtC,IAAIA,KAAK,CAACS,KAAK,CAACE,QAAQ,CAAC,MAAM,CAAC,KAAK,IAAI,EAAE;QACzCX,KAAK,CAACY,eAAe,GAAG,IAAI;MAC9B;IACF,CAAC;IACDC,MAAM,EAAGb,KAAU,IAAK;MACtBA,KAAK,CAACI,SAAS,GAAG,EAAE;MACpBJ,KAAK,CAACO,WAAW,GAAG,EAAE;MACtBP,KAAK,CAACQ,SAAS,GAAG,EAAE;MACpBR,KAAK,CAACS,KAAK,GAAG,EAAE;MAChBT,KAAK,CAACJ,IAAI,GAAG,EAAE;MACfI,KAAK,CAACY,eAAe,GAAG,KAAK;IAC/B,CAAC;IACDE,cAAc,EAAEd,KAAS,IAAG;MAC1B,IAAGA,KAAK,CAACS,KAAK,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAC;QAC/BX,KAAK,CAACe,OAAO,GAAG,IAAI;MACtB,CAAC,MAAI;QACHf,KAAK,CAACe,OAAO,GAAG,KAAK;MACvB;IACF;EACF;AACF,CAAC,CAAC;AAEF,eAAepB,SAAS,CAACqB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}