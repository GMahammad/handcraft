{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n// export const getCardItems = createAsyncThunk(\"cart/getCartItems\", async() => {\n//   const url = \"http://localhost:8080/api/products\";\n//   return fetch(url)\n//     .then((response) =>\n//       response.json().then((dataJson) => dataJson._embedded.products)\n//     )\n//     .catch((err) => console.log(err));\n// });\nconst initialState = {\n  cartItems: [{\n    items,\n    count: 0\n  }],\n  amount: 5,\n  total: 0,\n  isLoadingCart: true\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    clearCard: state => {\n      // state.cartItems=[\n      //   {\n      //     items:[],\n      //     count:0\n      //   }\n      // ]\n    },\n    addToCart: (state, action) => {},\n    removeItem: (state, action) => {\n      // const itemId = action.payload\n      // state.cartItems=[\n      //   {items:state.cartItems[0].items.filter((x:any)=> x.productId !== itemId),count:0}\n      // ]\n    },\n    // cartItems = [{productId,n,p,...}]\n    calculateTotals: state => {\n      let total = 0;\n      // state.cartItems[0].items.forEach((item:ProductModel) => {\n      //   total += item.price * item.price;\n      // });\n      // // state.amount = amount;\n      // state.total = total;\n    }\n  }\n  // extraReducers:{\n  //   [String(getCardItems.pending)]:(state:any)=>{\n  //       state.isLoadingCart=true\n  //   },\n  //   [String(getCardItems.fulfilled)]:(state:any,action)=>{\n  //       state.isLoadingCart=false;\n  //       let count = 1\n  //       if(state.cartItems[0].items.filter((x:ProductModel)=> x.productId)) \n  //       state.cartItems = [{\n  //         items:action.payload,\n  //         count:count\n  //       }]\n  //   },\n  //   [String(getCardItems.rejected)]:(state:any)=>{\n  //       state.isLoadingCart=true;\n  //   }\n  // }\n});\n\nexport const {\n  clearCard,\n  removeItem,\n  calculateTotals\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","cartItems","items","count","amount","total","isLoadingCart","cartSlice","name","reducers","clearCard","state","addToCart","action","removeItem","calculateTotals","actions","reducer"],"sources":["C:/Users/Mehemmed/Desktop/Code{1}/Projects/handcraft/src/main/handcraft-react/src/Cart/cartSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport ProductModel from \"../Models/ProductModel\";\r\n\r\n// export const getCardItems = createAsyncThunk(\"cart/getCartItems\", async() => {\r\n//   const url = \"http://localhost:8080/api/products\";\r\n//   return fetch(url)\r\n//     .then((response) =>\r\n//       response.json().then((dataJson) => dataJson._embedded.products)\r\n//     )\r\n//     .catch((err) => console.log(err));\r\n// });\r\n\r\n\r\nconst initialState = {\r\n  cartItems: [{items,count:0}],\r\n  amount: 5,\r\n  total: 0,\r\n  isLoadingCart: true,\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState,\r\n  reducers: {\r\n    clearCard:(state:any)=>{\r\n        // state.cartItems=[\r\n        //   {\r\n        //     items:[],\r\n        //     count:0\r\n        //   }\r\n        // ]\r\n    },\r\n\r\n\r\n    addToCart:(state:any,action)=>{\r\n\r\n    },\r\n\r\n    removeItem:(state:any,action)=>{\r\n      // const itemId = action.payload\r\n      // state.cartItems=[\r\n      //   {items:state.cartItems[0].items.filter((x:any)=> x.productId !== itemId),count:0}\r\n      // ]\r\n    },\r\n\r\n    // cartItems = [{productId,n,p,...}]\r\n    calculateTotals:(state:any)=>{\r\n      let total = 0;\r\n      // state.cartItems[0].items.forEach((item:ProductModel) => {\r\n      //   total += item.price * item.price;\r\n      // });\r\n      // // state.amount = amount;\r\n      // state.total = total;\r\n    }\r\n  },\r\n  // extraReducers:{\r\n  //   [String(getCardItems.pending)]:(state:any)=>{\r\n  //       state.isLoadingCart=true\r\n  //   },\r\n  //   [String(getCardItems.fulfilled)]:(state:any,action)=>{\r\n  //       state.isLoadingCart=false;\r\n  //       let count = 1\r\n  //       if(state.cartItems[0].items.filter((x:ProductModel)=> x.productId)) \r\n  //       state.cartItems = [{\r\n  //         items:action.payload,\r\n  //         count:count\r\n  //       }]\r\n  //   },\r\n  //   [String(getCardItems.rejected)]:(state:any)=>{\r\n  //       state.isLoadingCart=true;\r\n  //   }\r\n  // }\r\n});\r\nexport const{clearCard,removeItem,calculateTotals}= cartSlice.actions;\r\nexport default cartSlice.reducer;\r\n"],"mappings":"AAAA,SAA2BA,WAAW,QAAQ,kBAAkB;AAGhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,CAAC;IAACC,KAAK;IAACC,KAAK,EAAC;EAAC,CAAC,CAAC;EAC5BC,MAAM,EAAE,CAAC;EACTC,KAAK,EAAE,CAAC;EACRC,aAAa,EAAE;AACjB,CAAC;AAED,MAAMC,SAAS,GAAGR,WAAW,CAAC;EAC5BS,IAAI,EAAE,MAAM;EACZR,YAAY;EACZS,QAAQ,EAAE;IACRC,SAAS,EAAEC,KAAS,IAAG;MACnB;MACA;MACA;MACA;MACA;MACA;IAAA,CACH;IAGDC,SAAS,EAACA,CAACD,KAAS,EAACE,MAAM,KAAG,CAE9B,CAAC;IAEDC,UAAU,EAACA,CAACH,KAAS,EAACE,MAAM,KAAG;MAC7B;MACA;MACA;MACA;IAAA,CACD;IAED;IACAE,eAAe,EAAEJ,KAAS,IAAG;MAC3B,IAAIN,KAAK,GAAG,CAAC;MACb;MACA;MACA;MACA;MACA;IACF;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC,CAAC;;AACF,OAAO,MAAK;EAACK,SAAS;EAACI,UAAU;EAACC;AAAe,CAAC,GAAER,SAAS,CAACS,OAAO;AACrE,eAAeT,SAAS,CAACU,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}