{"ast":null,"code":"const buildSearchUrl = (searchTitle, categoryId, minPrice, maxPrice) => {\n  const baseUrl = \"http://localhost:8080/api/products/search\";\n  let url = baseUrl;\n  const appendQueryParam = param => {\n    url += url.includes(\"?\") ? `&${param}` : `?${param}`;\n  };\n  if (searchTitle !== \"\") {\n    appendQueryParam(`productName=${searchTitle}`);\n  }\n  if (categoryId !== 0) {\n    appendQueryParam(`category=${categoryId}`);\n  }\n  if (minPrice !== null && maxPrice !== null) {\n    appendQueryParam(`minPrice=${minPrice}&maxPrice=${maxPrice}`);\n  }\n  return url;\n};\nconst fetchProductByAllInputs = async (searchTitle, categoryId, minPrice, maxPrice, setProducts, setPriceError, setLoading) => {\n  let url = buildSearchUrl(searchTitle, categoryId, minPrice, maxPrice);\n  try {\n    setLoading(true);\n    const responseData = await fetch(url);\n    // Handle the response data and update state accordingly...\n    setLoading(false);\n    setPriceError(false); // Update the priceError state\n  } catch (error) {\n    setLoading(false);\n    setPriceError(true); // Update the priceError state\n  }\n};\n\nexport { fetchProductByAllInputs };","map":{"version":3,"names":["buildSearchUrl","searchTitle","categoryId","minPrice","maxPrice","baseUrl","url","appendQueryParam","param","includes","fetchProductByAllInputs","setProducts","setPriceError","setLoading","responseData","fetch","error"],"sources":["C:/Users/Mehemmed/Desktop/Code{1}/Projects/handcraft/src/main/handcraft-react/src/Utils/SearchFunction.tsx"],"sourcesContent":["import { Dispatch, SetStateAction } from \"react\";\r\nconst buildSearchUrl = (\r\n  searchTitle: string,\r\n  categoryId: number,\r\n  minPrice: number,\r\n  maxPrice: number\r\n): string => {\r\n  const baseUrl = \"http://localhost:8080/api/products/search\";\r\n  let url = baseUrl;\r\n\r\n  const appendQueryParam = (param: string): void => {\r\n    url += url.includes(\"?\") ? `&${param}` : `?${param}`;\r\n  };\r\n\r\n  if (searchTitle !== \"\") {\r\n    appendQueryParam(`productName=${searchTitle}`);\r\n  }\r\n\r\n  if (categoryId !== 0) {\r\n    appendQueryParam(`category=${categoryId}`);\r\n  }\r\n\r\n  if (minPrice !== null && maxPrice !== null) {\r\n    appendQueryParam(`minPrice=${minPrice}&maxPrice=${maxPrice}`);\r\n  }\r\n\r\n  return url;\r\n};\r\n\r\nconst fetchProductByAllInputs = async (\r\n  searchTitle: string,\r\n  categoryId: number,\r\n  minPrice: number,\r\n  maxPrice: number,\r\n  setProducts: Dispatch<SetStateAction<any[]>>,\r\n  setPriceError: Dispatch<SetStateAction<boolean>>,\r\n  setLoading: Dispatch<SetStateAction<boolean>>\r\n) => {\r\n  let url = buildSearchUrl(searchTitle, categoryId, minPrice, maxPrice);\r\n\r\n  try {\r\n    setLoading(true);\r\n    const responseData = await fetch(url);\r\n    // Handle the response data and update state accordingly...\r\n    setLoading(false);\r\n    setPriceError(false); // Update the priceError state\r\n  } catch (error) {\r\n    setLoading(false);\r\n    setPriceError(true); // Update the priceError state\r\n  }\r\n};\r\n\r\n\r\n\r\nexport { fetchProductByAllInputs };\r\n"],"mappings":"AACA,MAAMA,cAAc,GAAGA,CACrBC,WAAmB,EACnBC,UAAkB,EAClBC,QAAgB,EAChBC,QAAgB,KACL;EACX,MAAMC,OAAO,GAAG,2CAA2C;EAC3D,IAAIC,GAAG,GAAGD,OAAO;EAEjB,MAAME,gBAAgB,GAAIC,KAAa,IAAW;IAChDF,GAAG,IAAIA,GAAG,CAACG,QAAQ,CAAC,GAAG,CAAC,GAAI,IAAGD,KAAM,EAAC,GAAI,IAAGA,KAAM,EAAC;EACtD,CAAC;EAED,IAAIP,WAAW,KAAK,EAAE,EAAE;IACtBM,gBAAgB,CAAE,eAAcN,WAAY,EAAC,CAAC;EAChD;EAEA,IAAIC,UAAU,KAAK,CAAC,EAAE;IACpBK,gBAAgB,CAAE,YAAWL,UAAW,EAAC,CAAC;EAC5C;EAEA,IAAIC,QAAQ,KAAK,IAAI,IAAIC,QAAQ,KAAK,IAAI,EAAE;IAC1CG,gBAAgB,CAAE,YAAWJ,QAAS,aAAYC,QAAS,EAAC,CAAC;EAC/D;EAEA,OAAOE,GAAG;AACZ,CAAC;AAED,MAAMI,uBAAuB,GAAG,MAAAA,CAC9BT,WAAmB,EACnBC,UAAkB,EAClBC,QAAgB,EAChBC,QAAgB,EAChBO,WAA4C,EAC5CC,aAAgD,EAChDC,UAA6C,KAC1C;EACH,IAAIP,GAAG,GAAGN,cAAc,CAACC,WAAW,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,QAAQ,CAAC;EAErE,IAAI;IACFS,UAAU,CAAC,IAAI,CAAC;IAChB,MAAMC,YAAY,GAAG,MAAMC,KAAK,CAACT,GAAG,CAAC;IACrC;IACAO,UAAU,CAAC,KAAK,CAAC;IACjBD,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdH,UAAU,CAAC,KAAK,CAAC;IACjBD,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;EACvB;AACF,CAAC;;AAID,SAASF,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}