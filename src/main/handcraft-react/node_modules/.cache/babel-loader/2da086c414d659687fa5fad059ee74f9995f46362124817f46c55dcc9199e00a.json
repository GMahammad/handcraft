{"ast":null,"code":"const fetchProductByAllInputs = async (searchTitle, categoryId, minPrice, maxPrice, setProducts, setPriceError, setMinPrice, setMaxPrice) => {\n  if (minPrice >= maxPrice) {\n    setPriceError(true);\n    setMinPrice(0);\n    setMaxPrice(10000);\n  } else {\n    setPriceError(false);\n    let url = \"\";\n    if (searchTitle !== \"\" && categoryId !== 0 && minPrice !== 0 && maxPrice !== 10000) {\n      url = `http://localhost:8080/api/products/search/findByProductNameContainingIgnoreCaseAndCategoryAndPriceBetween?productName=${searchTitle}&category=${categoryId}%20&minPrice=${minPrice}%20&maxPrice=${maxPrice}%20`;\n    } else if (searchTitle !== \"\" && categoryId !== 0 && minPrice === 0 && maxPrice === 10000) {\n      url = `http://localhost:8080/api/products/search/findByProductNameContainingIgnoreCaseAndCategory?productName=${searchTitle}&category=${categoryId}%20`;\n    } else if (searchTitle !== \"\" && categoryId === 0 && minPrice === 0 && maxPrice === 10000) {\n      url = `http://localhost:8080/api/products/search/findByProductNameContainingIgnoreCase?productName=${searchTitle}`;\n    } else if (searchTitle !== \"\" && categoryId === 0 && minPrice !== 0 && maxPrice !== 10000) {\n      url = `http://localhost:8080/api/products/search/findByProductNameContainingIgnoreCaseAndPriceBetween?productName=${searchTitle}&minPrice=${minPrice}%20&maxPrice=${maxPrice}%20`;\n    } else if (searchTitle === \"\" && categoryId !== 0 && minPrice !== 0 && maxPrice !== 10000) {\n      url = `http://localhost:8080/api/products/search/findByCategoryAndPriceBetween?category=${categoryId}%20&minPrice=${minPrice}%20&maxPrice=${maxPrice}%20`;\n    } else if (searchTitle === \"\" && categoryId !== 0 && minPrice === 0 && maxPrice === 10000) {\n      url = `http://localhost:8080/api/products/search/findByCategory?category=${categoryId}%20`;\n    } else if (searchTitle === \"\" && categoryId === 0 && minPrice !== 0 && maxPrice !== 10000) {\n      url = `http://localhost:8080/api/products/search/findByPriceBetween?minPrice=${minPrice}%20&maxPrice=${maxPrice}%20`;\n    } else {\n      url = `http://localhost:8080/api/products/`;\n    }\n    if (minPrice && maxPrice) {\n      const responseData = await fetch(url);\n      console.log(url);\n      if (!responseData.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n      const responseJson = await responseData.json();\n      setProducts(responseJson._embedded.products);\n    }\n  }\n};\nexport { fetchProductByAllInputs };","map":{"version":3,"names":["fetchProductByAllInputs","searchTitle","categoryId","minPrice","maxPrice","setProducts","setPriceError","setMinPrice","setMaxPrice","url","responseData","fetch","console","log","ok","Error","responseJson","json","_embedded","products"],"sources":["C:/Users/Mehemmed/Desktop/Code{1}/Projects/handcraft/src/main/handcraft-react/src/Utils/SearchFunction.tsx"],"sourcesContent":["import { Dispatch, SetStateAction } from \"react\";\r\nimport ProductModel from \"../Models/ProductModel\";\r\n\r\nconst fetchProductByAllInputs = async (\r\n  searchTitle: string,\r\n  categoryId: number,\r\n  minPrice: number,\r\n  maxPrice: number,\r\n  setProducts: Dispatch<SetStateAction<ProductModel[]>>,\r\n  setPriceError: Dispatch<SetStateAction<boolean>>,\r\n  setMinPrice: Dispatch<SetStateAction<number>>,\r\n  setMaxPrice: Dispatch<SetStateAction<number>>\r\n) => {\r\n  if (\r\n    minPrice >= maxPrice \r\n  ) {\r\n    setPriceError(true);\r\n    setMinPrice(0)\r\n    setMaxPrice(10000)\r\n  } else {\r\n    setPriceError(false);\r\n    let url = \"\";\r\n    if (\r\n      searchTitle !== \"\" &&\r\n      categoryId !== 0 &&\r\n      minPrice !== 0 &&\r\n      maxPrice !== 10000\r\n    ) {\r\n      url = `http://localhost:8080/api/products/search/findByProductNameContainingIgnoreCaseAndCategoryAndPriceBetween?productName=${searchTitle}&category=${categoryId}%20&minPrice=${minPrice}%20&maxPrice=${maxPrice}%20`;\r\n    } else if (\r\n      searchTitle !== \"\" &&\r\n      categoryId !== 0 &&\r\n      minPrice === 0 &&\r\n      maxPrice === 10000\r\n    ) {\r\n      url = `http://localhost:8080/api/products/search/findByProductNameContainingIgnoreCaseAndCategory?productName=${searchTitle}&category=${categoryId}%20`;\r\n    } else if (\r\n      searchTitle !== \"\" &&\r\n      categoryId === 0 &&\r\n      minPrice === 0 &&\r\n      maxPrice === 10000\r\n    ) {\r\n      url = `http://localhost:8080/api/products/search/findByProductNameContainingIgnoreCase?productName=${searchTitle}`;\r\n    } else if (\r\n      searchTitle !== \"\" &&\r\n      categoryId === 0 &&\r\n      minPrice !== 0 &&\r\n      maxPrice !== 10000\r\n    ) {\r\n      url = `http://localhost:8080/api/products/search/findByProductNameContainingIgnoreCaseAndPriceBetween?productName=${searchTitle}&minPrice=${minPrice}%20&maxPrice=${maxPrice}%20`;\r\n    } else if (\r\n      searchTitle === \"\" &&\r\n      categoryId !== 0 &&\r\n      minPrice !== 0 &&\r\n      maxPrice !== 10000\r\n    ) {\r\n      url = `http://localhost:8080/api/products/search/findByCategoryAndPriceBetween?category=${categoryId}%20&minPrice=${minPrice}%20&maxPrice=${maxPrice}%20`;\r\n    } else if (\r\n      searchTitle === \"\" &&\r\n      categoryId !== 0 &&\r\n      minPrice === 0 &&\r\n      maxPrice === 10000\r\n    ) {\r\n      url = `http://localhost:8080/api/products/search/findByCategory?category=${categoryId}%20`;\r\n    } else if (\r\n      searchTitle === \"\" &&\r\n      categoryId === 0 &&\r\n      minPrice !== 0 &&\r\n      maxPrice !== 10000\r\n    ) {\r\n      url = `http://localhost:8080/api/products/search/findByPriceBetween?minPrice=${minPrice}%20&maxPrice=${maxPrice}%20`;\r\n    } else {\r\n      url = `http://localhost:8080/api/products/`;\r\n    }\r\n    if (minPrice && maxPrice) {\r\n      const responseData = await fetch(url);\r\n      console.log(url);\r\n      if (!responseData.ok) {\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n      const responseJson = await responseData.json();\r\n      setProducts(responseJson._embedded.products);\r\n    }\r\n  }\r\n};\r\n\r\nexport { fetchProductByAllInputs };\r\n"],"mappings":"AAGA,MAAMA,uBAAuB,GAAG,MAAAA,CAC9BC,WAAmB,EACnBC,UAAkB,EAClBC,QAAgB,EAChBC,QAAgB,EAChBC,WAAqD,EACrDC,aAAgD,EAChDC,WAA6C,EAC7CC,WAA6C,KAC1C;EACH,IACEL,QAAQ,IAAIC,QAAQ,EACpB;IACAE,aAAa,CAAC,IAAI,CAAC;IACnBC,WAAW,CAAC,CAAC,CAAC;IACdC,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC,MAAM;IACLF,aAAa,CAAC,KAAK,CAAC;IACpB,IAAIG,GAAG,GAAG,EAAE;IACZ,IACER,WAAW,KAAK,EAAE,IAClBC,UAAU,KAAK,CAAC,IAChBC,QAAQ,KAAK,CAAC,IACdC,QAAQ,KAAK,KAAK,EAClB;MACAK,GAAG,GAAI,yHAAwHR,WAAY,aAAYC,UAAW,gBAAeC,QAAS,gBAAeC,QAAS,KAAI;IACxN,CAAC,MAAM,IACLH,WAAW,KAAK,EAAE,IAClBC,UAAU,KAAK,CAAC,IAChBC,QAAQ,KAAK,CAAC,IACdC,QAAQ,KAAK,KAAK,EAClB;MACAK,GAAG,GAAI,0GAAyGR,WAAY,aAAYC,UAAW,KAAI;IACzJ,CAAC,MAAM,IACLD,WAAW,KAAK,EAAE,IAClBC,UAAU,KAAK,CAAC,IAChBC,QAAQ,KAAK,CAAC,IACdC,QAAQ,KAAK,KAAK,EAClB;MACAK,GAAG,GAAI,+FAA8FR,WAAY,EAAC;IACpH,CAAC,MAAM,IACLA,WAAW,KAAK,EAAE,IAClBC,UAAU,KAAK,CAAC,IAChBC,QAAQ,KAAK,CAAC,IACdC,QAAQ,KAAK,KAAK,EAClB;MACAK,GAAG,GAAI,8GAA6GR,WAAY,aAAYE,QAAS,gBAAeC,QAAS,KAAI;IACnL,CAAC,MAAM,IACLH,WAAW,KAAK,EAAE,IAClBC,UAAU,KAAK,CAAC,IAChBC,QAAQ,KAAK,CAAC,IACdC,QAAQ,KAAK,KAAK,EAClB;MACAK,GAAG,GAAI,oFAAmFP,UAAW,gBAAeC,QAAS,gBAAeC,QAAS,KAAI;IAC3J,CAAC,MAAM,IACLH,WAAW,KAAK,EAAE,IAClBC,UAAU,KAAK,CAAC,IAChBC,QAAQ,KAAK,CAAC,IACdC,QAAQ,KAAK,KAAK,EAClB;MACAK,GAAG,GAAI,qEAAoEP,UAAW,KAAI;IAC5F,CAAC,MAAM,IACLD,WAAW,KAAK,EAAE,IAClBC,UAAU,KAAK,CAAC,IAChBC,QAAQ,KAAK,CAAC,IACdC,QAAQ,KAAK,KAAK,EAClB;MACAK,GAAG,GAAI,yEAAwEN,QAAS,gBAAeC,QAAS,KAAI;IACtH,CAAC,MAAM;MACLK,GAAG,GAAI,qCAAoC;IAC7C;IACA,IAAIN,QAAQ,IAAIC,QAAQ,EAAE;MACxB,MAAMM,YAAY,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;MACrCG,OAAO,CAACC,GAAG,CAACJ,GAAG,CAAC;MAChB,IAAI,CAACC,YAAY,CAACI,EAAE,EAAE;QACpB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACA,MAAMC,YAAY,GAAG,MAAMN,YAAY,CAACO,IAAI,CAAC,CAAC;MAC9CZ,WAAW,CAACW,YAAY,CAACE,SAAS,CAACC,QAAQ,CAAC;IAC9C;EACF;AACF,CAAC;AAED,SAASnB,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}