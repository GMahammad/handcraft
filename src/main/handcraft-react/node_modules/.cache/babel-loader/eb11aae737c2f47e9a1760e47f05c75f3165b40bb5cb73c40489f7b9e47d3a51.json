{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nconst initialState = {\n  cartItems: [],\n  amount: 0,\n  total: 0,\n  isLoadingCart: true\n};\nexport const fetchProducts = createAsyncThunk(\"cart/fetchProducts\", async () => {\n  const url = \"http://localhost:8080/api/products\";\n  const responseData = await fetch(url);\n  if (!responseData.ok) {\n    throw new Error(\"Something went wrong!\");\n  }\n  const responseJson = await responseData.json();\n  const fetchedData = responseJson._embedded.products;\n  const fetchedCartItems = fetchedData.map(data => ({\n    productId: data.productId,\n    productName: data.productName,\n    productDescription: data.productDescription,\n    discount: data.discount,\n    discountedPrice: data.discountedPrice,\n    price: data.price,\n    rating: data.rating\n  }));\n  return fetchedCartItems;\n});\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchProducts.fulfilled, (state, action) => {\n      state.cartItems = action.payload;\n      state.isLoadingCart = false;\n    });\n  }\n});\nexport default cartSlice.reducer;\n\n// Dispatch the fetchProducts action when setting up the store\nconst store = configureStore({\n  reducer: {\n    cart: cartSlice.reducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(fetchProducts)\n});\nexport { store };","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","cartItems","amount","total","isLoadingCart","fetchProducts","url","responseData","fetch","ok","Error","responseJson","json","fetchedData","_embedded","products","fetchedCartItems","map","data","productId","productName","productDescription","discount","discountedPrice","price","rating","cartSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","reducer","store","configureStore","cart","middleware","getDefaultMiddleware","concat"],"sources":["C:/Users/Mehemmed/Desktop/Code{1}/Projects/handcraft/src/main/handcraft-react/src/Cart/cartSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport ProductModel from \"../Models/ProductModel\";\r\n\r\ninterface CartState {\r\n  cartItems: ProductModel[];\r\n  amount: number;\r\n  total: number;\r\n  isLoadingCart: boolean;\r\n}\r\n\r\nconst initialState: CartState = {\r\n  cartItems: [],\r\n  amount: 0,\r\n  total: 0,\r\n  isLoadingCart: true,\r\n};\r\n\r\nexport const fetchProducts = createAsyncThunk(\r\n  \"cart/fetchProducts\",\r\n  async () => {\r\n    const url = \"http://localhost:8080/api/products\";\r\n    const responseData = await fetch(url);\r\n    if (!responseData.ok) {\r\n      throw new Error(\"Something went wrong!\");\r\n    }\r\n    const responseJson = await responseData.json();\r\n    const fetchedData = responseJson._embedded.products;\r\n\r\n    const fetchedCartItems: ProductModel[] = fetchedData.map(\r\n      (data: ProductModel) => ({\r\n        productId: data.productId,\r\n        productName: data.productName,\r\n        productDescription: data.productDescription,\r\n        discount: data.discount,\r\n        discountedPrice: data.discountedPrice,\r\n        price: data.price,\r\n        rating: data.rating,\r\n      })\r\n    );\r\n\r\n    return fetchedCartItems;\r\n  }\r\n);\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchProducts.fulfilled, (state, action) => {\r\n      state.cartItems = action.payload;\r\n      state.isLoadingCart = false;\r\n    });\r\n  },\r\n});\r\n\r\nexport default cartSlice.reducer;\r\n\r\n// Dispatch the fetchProducts action when setting up the store\r\nconst store = configureStore({\r\n  reducer: {\r\n    cart: cartSlice.reducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(fetchProducts),\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport { store };\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAUhE,MAAMC,YAAuB,GAAG;EAC9BC,SAAS,EAAE,EAAE;EACbC,MAAM,EAAE,CAAC;EACTC,KAAK,EAAE,CAAC;EACRC,aAAa,EAAE;AACjB,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGN,gBAAgB,CAC3C,oBAAoB,EACpB,YAAY;EACV,MAAMO,GAAG,GAAG,oCAAoC;EAChD,MAAMC,YAAY,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;EACrC,IAAI,CAACC,YAAY,CAACE,EAAE,EAAE;IACpB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1C;EACA,MAAMC,YAAY,GAAG,MAAMJ,YAAY,CAACK,IAAI,CAAC,CAAC;EAC9C,MAAMC,WAAW,GAAGF,YAAY,CAACG,SAAS,CAACC,QAAQ;EAEnD,MAAMC,gBAAgC,GAAGH,WAAW,CAACI,GAAG,CACrDC,IAAkB,KAAM;IACvBC,SAAS,EAAED,IAAI,CAACC,SAAS;IACzBC,WAAW,EAAEF,IAAI,CAACE,WAAW;IAC7BC,kBAAkB,EAAEH,IAAI,CAACG,kBAAkB;IAC3CC,QAAQ,EAAEJ,IAAI,CAACI,QAAQ;IACvBC,eAAe,EAAEL,IAAI,CAACK,eAAe;IACrCC,KAAK,EAAEN,IAAI,CAACM,KAAK;IACjBC,MAAM,EAAEP,IAAI,CAACO;EACf,CAAC,CACH,CAAC;EAED,OAAOT,gBAAgB;AACzB,CACF,CAAC;AAED,MAAMU,SAAS,GAAG5B,WAAW,CAAC;EAC5B6B,IAAI,EAAE,MAAM;EACZ3B,YAAY;EACZ4B,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAAC1B,aAAa,CAAC2B,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1DD,KAAK,CAAChC,SAAS,GAAGiC,MAAM,CAACC,OAAO;MAChCF,KAAK,CAAC7B,aAAa,GAAG,KAAK;IAC7B,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,eAAesB,SAAS,CAACU,OAAO;;AAEhC;AACA,MAAMC,KAAK,GAAGC,cAAc,CAAC;EAC3BF,OAAO,EAAE;IACPG,IAAI,EAAEb,SAAS,CAACU;EAClB,CAAC;EACDI,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC,CAAC,CAACC,MAAM,CAACrC,aAAa;AAC/C,CAAC,CAAC;AAKF,SAASgC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}